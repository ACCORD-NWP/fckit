if( @PNAME@_IS_BUILD_DIR_EXPORT )
  set( FCTEST_GENERATOR @PYTHON_EXECUTABLE@ @CMAKE_CURRENT_SOURCE_DIR@/src/tools/fctest_generate_runner.py )
else()
  set( FCTEST_GENERATOR @PYTHON_EXECUTABLE@ @CMAKE_INSTALL_PREFIX@/@INSTALL_LIBEXEC_DIR@/fctest_generate_runner.py )
endif()

function( fctest_generate_runner output filename )

	get_filename_component(base ${filename} NAME_WE)
	set(base_abs ${CMAKE_CURRENT_SOURCE_DIR}/${base})
        set(outfile ${CMAKE_CURRENT_BINARY_DIR}/${base}_main.F90)
	set(${output} ${outfile} PARENT_SCOPE)

	add_custom_command(
		OUTPUT ${outfile}
		COMMAND ${FCTEST_GENERATOR} -i ${CMAKE_CURRENT_SOURCE_DIR}/${filename} -o ${outfile}
		DEPENDS ${filename} )

	set_source_files_properties(${outfile} PROPERTIES GENERATED TRUE)

endfunction()



macro( add_fctest )

  set( options           )
  set( single_value_args TARGET )
  set( multi_value_args SOURCES LIBS )

  cmake_parse_arguments( _PAR "${options}" "${single_value_args}" "${multi_value_args}"  ${_FIRST_ARG} ${ARGN} )

  include_directories( ${FCTEST_INCLUDE_DIRS} )

  list( GET _PAR_SOURCES 0 TESTSUITE )
  list( REMOVE_ITEM _PAR_SOURCES ${TESTSUITE})

  list( APPEND _PAR_LIBS ${FCTEST_LIBRARIES} )
  fctest_generate_runner( TESTRUNNER ${TESTSUITE} )

  add_custom_target( ${_PAR_TARGET}_module SOURCES ${TESTSUITE} )
  ecbuild_add_test( TARGET ${_PAR_TARGET} ${_PAR_UNPARSED_ARGUMENTS} SOURCES ${TESTRUNNER} ${_PAR_SOURCES} LIBS ${_PAR_LIBS} )

endmacro()
